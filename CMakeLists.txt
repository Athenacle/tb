
CMAKE_MINIMUM_REQUIRED(VERSION 3.0)


PROJECT(taobao)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
SET(TB_INCLUDE_ROOT ${CMAKE_SOURCE_DIR}/include/)

INCLUDE_DIRECTORIES(${TB_INCLUDE_ROOT})
INCLUDE_DIRECTORIES(${TB_INCLUDE_ROOT}/filechecker)

SET(CMAKE_CXX_STANDARD 14)
SET(PROJECT_VERSION 0.0.0)
STRING(TIMESTAMP TB_BUILD_TIME "%Y-%m-%d %H:%M:%SZ")
SET(USE_POSIX_THREAD 1)
#SET(USE_CXX_THREAD 1)

SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

SET(PROJECT_BUILD_PATH ${CMAKE_SOURCE_DIR})

INCLUDE(CompilerOptionCheck)
INCLUDE(ConfigCheck)


### dependencies start

INCLUDE(FindPkgConfig)

#libssh2
PKG_SEARCH_MODULE(libssh2 REQUIRED libssh2 >= 1.7.0)
IF(${libssh2_FOUND})
  MESSAGE(STATUS "libssh2 Version: " ${libssh2_VERSION})
  LIST(APPEND libList ${libssh2_LIBRARIES})
  SET(BUILD_WITH_LIBSSH 1)
ENDIF()

#jsoncpp
PKG_SEARCH_MODULE(jsoncpp REQUIRED jsoncpp >= 1.6.2)
IF(${jsoncpp_FOUND})
  MESSAGE(STATUS "jsoncpp Version:" ${jsoncpp_VERSION})
  INCLUDE_DIRECTORIES(${jsoncpp_INCLUDE_DIRS})
ENDIF()
LIST(APPEND libList ${jsoncpp_LIBRARIES})

#zbar
PKG_SEARCH_MODULE(zbar REQUIRED zbar)
SET(ZBAR_VERSION ${zbar_VERSION})
MESSAGE(STATUS "zbar version: " ${zbar_VERSION})

LIST(APPEND libList ${zbar_LIBRARIES})

#mysql
INCLUDE(FindMySQL REUQIRED)
LIST(APPEND libList ${MYSQL_LIBRARIES})
INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})

#boost
FIND_PACKAGE(Boost 1.60 COMPONENTS thread regex system filesystem)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
STRING(CONCAT TB_BOOST_VERSION ${Boost_MAJOR_VERSION} "." ${Boost_MINOR_VERSION} "." ${Boost_SUBMINOR_VERSION})
LIST(APPEND libList ${Boost_THREAD_LIBRARIES} ${Boost_REGEX_LIBRARIES} ${Boost_SYSTEM_LIBRARIES} ${Boost_FILESYSTEM_LIBRARIES})
SET(TB_BOOST_VERSION ${TB_BOOST_VERSION})

IF (${USE_CXX_THREAD})
  LIST(APPEND libList ${Boost_SYSTEM_LIBRARIES})
ENDIF()

#thread
FIND_PACKAGE(Threads REQUIRED)
LIST(APPEND libList pthread)

#opencv
FIND_PACKAGE(OpenCV 3.0 REQUIRED)
SET(TB_OPENCV_VERSION ${OpenCV_VERSION_STRING})
LIST(APPEND libList ${OpenCV_LIBS})

#zlib
INCLUDE(FindZLIB)
FIND_PACKAGE(ZLIB REQUIRED)
SET(TB_ZLIB_VERSION ${ZLIB_VERSION_STRING})
LIST(APPEND libList ${ZLIB_LIBRARIES})

INCLUDE(BaiduOCR)

INCLUDE(FindOpenSSL)
LIST(APPEND libList ${OPENSSL_LIBRARIES})

INCLUDE(FindCURL)
LIST(APPEND libList ${CURL_LIBRARIES})
SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--as-needed -z now")
SET(CMAKE_MODULE_LINKER_FLAGS "-Wl,--as-needed -z now")
##dependencies end
#### configure file.
CONFIGURE_FILE(${TB_INCLUDE_ROOT}/config.h.in
  ${TB_INCLUDE_ROOT}/config.h)

ADD_DEFINITIONS(-DHAVE_CONFIG_H)

AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR}/lib TB_SOURCE_LIST)

AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR}/filechecker FC_LIST)

ADD_LIBRARY(tb STATIC ${TB_SOURCE_LIST} )

ADD_EXECUTABLE(fchecker ${FC_LIST})

ADD_DEPENDENCIES(tb BaiduOCR)

ADD_DEPENDENCIES(fchecker tb)

TARGET_LINK_LIBRARIES(fchecker tb pthread ${libList})
## tests

INCLUDE(Gtest)

AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR}/test/json TB_TEST_SOURCE_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR}/test/tests TB_TEST_SOURCE_LIST)

ADD_EXECUTABLE(tbTest ${TB_TEST_SOURCE_LIST}
  ${CMAKE_SOURCE_DIR}/test/main.cpp)

ADD_DEPENDENCIES(tbTest gtest)

ADD_EXECUTABLE(sftpTest ${CMAKE_SOURCE_DIR}/test/utils/sftptest.cpp)

ADD_EXECUTABLE(imgTest ${CMAKE_SOURCE_DIR}/test/utils/img.cpp)

ADD_EXECUTABLE(logTest ${CMAKE_SOURCE_DIR}/test/utils/log_test.cpp)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/test)

TARGET_LINK_LIBRARIES(imgTest tb ${libList})
TARGET_LINK_LIBRARIES(tbTest libgtest tb ${libList})
TARGET_LINK_LIBRARIES(logTest tb pthread ${libList})
TARGET_LINK_LIBRARIES(sftpTest tb pthread ${libList})
